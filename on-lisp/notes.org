* Functions

What is defun, its purpose, relation between symbol-value and symbol-function.

** Functional Arguments

Very interesting definition of `apply` and `funcall`:

#+NAME: apply-vs-funcall
#+BEGIN_SRC lisp
(apply #'+ 1 '(2))
(funcall #'+ 1 2
#+END_SRC

Apply can take any number of arguments and the function given first will be
applied to the list made by consing the rest of the arguments onto the list
given last. If it is inconvenient to give the arguments as a list, we can use
funcall, which differs from apply only in this respect. The previous apply
and funcall calls are equivalents.

For a definition of "cons" and "consing": http://stackoverflow.com/questions/2256261/why-is-consing-in-lisp-slow
In this SO link we see another definition:

"I don't think cons is slow. It doesn't create a new copy of the entire list,
it just appends a new element onto the front of a linked list."

So the definition of CONS is to prepend a new cons in the head of the list.

The following is an implementation of 'remove-if, if it was not implemented
in modern Common Lisp:

#+NAME: our-remove-if
#+BEGIN_SRC lisp
  (defun our-remove-if (fn lst)
    (if (null lst)
        nil
        (if (funcall fn (car lst))
            (our-remove-if fn (cdr lst))
            (cons (car lst) (our-remove-if fn (cdr lst))))))
#+END_SRC

**** Note: Property Lists
In the 2.4 section (functions as properties) a very interesting scenario is
described and solved by using "property lists". These property lists are
a kind of "properties" (defined by a name, or property indicator, or key) with
a value. These properties can be attached to an object, this object being, in this
case, a function:

#+BEGIN_SRC lisp
  (setf (get 'my-double 'some-property)
        10)
  (get 'my-double 'some-property) ;; will return 10!
#+END_SRC

Does not seems to be very important for now, any language might have this
way of attaching data to generic objects. You can do in Python, for instance:

#+BEGIN_SRC python
  def my_double(x):
      "I'm a very simple function"
      return x * 2

  my_double.some_property = 10
  print (my_double.some_property)
  # This will print 10
#+END_SRC

But it seems that in Common Lisp it might have additional uses. We'll see.

** Scope

This section is very interesting as it explains both dynamic and lexical scope.
Current Common Lisp uses lexical scope, but it interesting to see how dynamic
scope works. In dynamic scope, a free variable will have the value that was
assigned last in the dynamic execution of the program. For instance:

#+BEGIN_SRC lisp
  ;; the something defun is defined somewhere
  (let x 10
       (defun something (y) (list x y)))

  ;; and then it is called
  (let x 5
       (something 3))

  ;; in dynamic scope the result will be '(5 3)
  ;; while in lexical scope the result will be '(10 3)

#+END_SRC

** Closures

When defining functions containing free variables, the system saves bindings
of those bindings. Closures are so pervasive that it is possible to use them
without ever knowing about it, like in the following example:

#+BEGIN_SRC lisp
  (defun list+ (lst n)
    (mapcar #'(lambda (x) (+ x n))
            lst))
#+END_SRC

In `list+` function, a closure is created in the lambda definition on the
`n` free variable.

Following this description we have the always present, but never important
nor relevant, example of using a closure to create an `adder` function. There
are no more relevant examples of a closure usage until the end of the section,
when the `make-dbms`. The `make-dbms` function returns a list of three functions,
each one of them action on the object passed as an argument. Each one of those
three functions closes (creates a closure) around the `db` parameter. In this
case a property list.

#+BEGIN_SRC lisp
  (defun make-dbms (db)
    (list
     #'(lambda (key)
         (cdr (assoc key db)))
     #'(lambda (key val)
         (push (cons key val) db)
         key) ;; returns the key
     #'(lambda (key)
         (setf db (delete key db :key #'car))
         key))) ;; returns the key
#+END_SRC

This weird API would allow to create an object based on association keys
and then using the `first`, `second` or `third` functions to actually call
the appropriate function returned by `make-dbms`.

#+BEGIN_SRC lisp
  (setq cities (make-dbms '((dublin . ireland) (paris . france))))

  (funcall (car cities) 'dublin) ;; returns IRELAND
  (funcall (first cities) 'dublin) ;; returns IRELAND
  (funcall (second cities) 'london 'england) ;; returns LONDON
#+END_SRC

** Local Functions

When a function needs to refer to itself (for a recursive function) but needs
to be defined in place (if it has to bind some free variables from the context,
there is the `labels` special form that acts like `let` for functions. An
example of its use is:

#+BEGIN_SRC lisp
  (defun count-instances (obj lsts)
    (labels ((instances-in (lst)
               (if (consp lst)
                   (+ (if (eq (car lst) obj) 1 0)
                      (instances-in (cdr lst)))
                   0))))
    (mapcar #'instances-in lsts))

  (count-instances 'a '((a b c) (d a r p a) (d a r) (a a)))
  ;; returns (1 2 1 2)
#+END_SRC

** Tail-Recursive

Tail recursive functions can be optimized into loops by some Common Lisp
compilers. The following functions are defined as recursive and tail-recursive.

#+BEGIN_SRC lisp
  ;; this is the recursive function
  (defun our-length (lst)
    (if (null lst)
        0
        (+1 (our-length (cdr lst)))))

  ;; the tail recursive function uses an accumulator
  (defun tr-our-length (lst)
    (labels ((rec (lst acc)
               (if (null lst)
                   acc
                   (rec (cdr lst) (+1 acc)))))
      (rec lst 0)))
#+END_SRC

This is it, if there are no more operations to perform after the recursive call
(the recursive call is at the tail), the function becomes tail recursive and
can be optimized by the compiler.

* Functional Programming

This section describes using functions as the base for programming, and that
using return values instead of side effects, leads to programs that are
easier to read, debug, test and maintain. These arguments are not backed
up by I think that at this moment no one would fight against them.

One example is `bad-reverse` and `good-reverse` which reverse a list passed
as arguments. `bad-reverse` reverses in place: there are side effects, the
original list is modified. `good-reverse` at the other hand, makes sense
because of the values it will return, nor its side effects. `good-reverse`
might have side effects, if for some reason those help optimize the
program, or some other reason, but we should not rely on those side effects.

The `multiple-value-bind` macro is explained, and the usage of the `values`
form.

* Utility Functions

This is an interesting section that might be its own report, or blog post,
it seems to be disconnected from the rest of the material (to be honest,
each section of the book seems to be disconnected from the border sections,
but anyway the sections have a special value that builds on top of the
others, not necessarily **touching** the borders... anyway).

There are some ideas on why you would like to use utility functions, what
are they and how to promote them from subroutines, local to a particular
program, to utilities, that will be shared by many programs. Small
utilities are presented, and they are very important on what they do,
to understand the purpose of utilities:

#+BEGIN_SRC lisp
  ;; gets the last element of the list, `last' returns the last `cons'.
  (defun last1 (lst)
    (car (last lst)))

  ;; returns true if list has only one element
  (defun single (lst)
    (and (consp lst) (not (cdr lst))))

  ;; returns obj appended to lst
  (defun append1 (lst obj)
    (append lst (list obj)))

  ;; similar to append1 but with nconc instead of append (which is destructive)
  (defun conc1 (lst obj)
    (nconc lst (list obj)))

  ;; builds and returns a list if obj is not a list
  (defun mklist (obj)
    (if (listp obj) obj (list obj)))
#+END_SRC

There is one important case for error handling here: as these
utilities are very concise, the error handling is performed by the
functions that are being called:

#+BEGIN_SRC lisp
> (last1 "blub")
>>Error: "blub" is not a list.
Broken at LAST...
#+END_SRC

In this example, `LAST` is capturing the error and reporting.

Next there are more complete examples, they require more abstraction
and lines of code, they not necessarily do more than the previous
utilities (but anyone could challenge this statement), they just
happen to need to be written with more lines:

#+BEGIN_SRC lisp
  ;; compares length of lists and returns true if the first one (x) is longer
  ;; efficient as it only traverses the list until one of them is completely
  ;; consumed
  (defun longer (x y)
    (labels ((compare (x y)
               (and (consp x)
                    (or (null y)
                        (compare (cdr x) (cdr y))))))
      (if (and (listp x) (listp y))
          (compare x y)
          (> (length x) (length y)))))

  ;; returns a list removing elements which do not return true to `fn'
  (defun filter (fn lst)
    (let ((acc nil))
      (dolist (x lst)
        (let ((val (funcall fn x)))
          (if val (push val acc))))
      (nreverse acc)))

  ;;
  (defun group (source n)
    (if (zerop n) (error "zero length"))
    (labels ((rec (source acc)
               (let ((rest (nthcdr n source)))
                 (if (consp rest)
                     (rec rest (cons (subseq source 0 n) acc))
                     (nreverse (cons source acc))))))
      (if source (rec source nil) nil)))
#+END_SRC

You can use `filter` like in the next example:

#+BEGIN_SRC lisp
> (filter #'(lambda (x) (if (numberp x) (1+ x)))
          '(a 1 2 b 3 c d 4))
(2 3 4 5)
#+END_SRC

The `group` function will group the list passed as the `source`
parameter into groups of size `n`. If the last group does not have
enough elements, it will remain as a smallest group.

#+BEGIN_SRC lisp
> (group '(a b c d e f g) 2)
((a b) (c d) (e f) (g)
#+END_SRC
